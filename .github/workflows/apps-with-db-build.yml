name: build-app-with-db

on:
  workflow_call:

jobs:
  validations:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: yarn
      - name: install
        run: yarn install --frozen-lockfile
      - name: lint
        run: yarn lint:check

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_DB: db
          POSTGRES_PASSWORD: pass1234
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
          cache: yarn
      - name: install
        run: yarn install --frozen-lockfile
      - name: create .env
        run: echo "" >> .env
      - name: build
        run: yarn build
      - name: test
        run: yarn test
        env:
          PG_COMPONENT_PSQL_CONNECTION_STRING: postgres://postgres:pass1234@localhost/db
      - name: hide coveralls if repo is private
        id: repo-visibility
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          RESPONSE=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }})

          # Validate and parse JSON response
          if echo "$RESPONSE" | jq -e . >/dev/null 2>&1; then
              IS_PRIVATE=$(echo "$RESPONSE" | jq -r '.private')
          else
              echo "Error: API response is not valid JSON or malformed."
              exit 1
          fi

          echo $IS_PRIVATE
          # Set environment variable for coveralls
          if [ "$IS_PRIVATE" = 'true' ]; then
              echo "continue-coveralls=false" >> $GITHUB_OUTPUT
          else
              echo "continue-coveralls=true" >> $GITHUB_OUTPUT
          fi
  
      - name: find coverage files in any workspace or root
        if: steps.repo-visibility.outputs.continue-coveralls == 'true'
        run: |
          coverage_files=$(find ./ -type f -name 'lcov.info' -not -path '*/node_modules/*')
          echo "COVERAGE_FILES=$(echo $coverage_files | tr '\n' ' ')" >> $GITHUB_OUTPUT

      - name: report coverage to coveralls
        if: steps.repo-visibility.outputs.continue-coveralls == 'true'
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: $COVERAGE_FILES
